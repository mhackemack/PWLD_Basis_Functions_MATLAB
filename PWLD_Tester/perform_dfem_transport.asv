function out = perform_dfem_transport(ndat, solvdat, mesh, DoF, x)

% Loop through Quadrature Directions
% ----------------------------------
for m=1:ndat.angularQuadrature
    
    [] = get_global_matrices(m, ndat, mesh, DoF, x);
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                           Function List
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [L, rhs] = get_global_matrices(angDir, ndat, mesh, DoF, x)



return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = get_source(m, g, x)



return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = split_solution(x, groups, stride)
out = cell(groups,1);
n = 0;
for g=1:groups
    out{g} = x(n+1:n+stride);
    n = n + stride;
end
return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = combine_solution(x, groups, stride)
out = zeros(groups*stride,1);
n = 0;
for g=1:groups
    out(n+1:n+stride) = x{g};
    n = n + stride;
end
return